# This is the main configuration file for your NixOS system.
# It declares the software and services to be installed and configured.
#
# For more details, consult the NixOS manual:
# https://nixos.org/manual/nixos/stable/
# Or run `man configuration.nix` on your system.

{ config, pkgs, ... }:

{
  # =================================================================
  # 1. IMPORTS
  #
  # Import other configuration files, such as hardware-configuration.nix.
  # =================================================================
  imports =
    [ # Import the hardware configuration generated by NixOS installer.
      ./hardware-configuration.nix
    ];

  # =================================================================
  # 2. BOOTLOADER
  #
  # Configure the system's bootloader (GRUB, systemd-boot, etc.).
  # =================================================================
  boot.loader.grub = {
    enable = true;
    device = "/dev/sda"; # Replace with your boot device (e.g., /dev/sda or /dev/nvme0n1)
    useOSProber = true; # Automatically detect other operating systems
  };
  # boot.loader.systemd-boot.enable = true; # Alternative: Enable systemd-boot
  # boot.loader.efi.canTouchEfiVariables = true; # Required for systemd-boot on UEFI

# Enable experimental Nix features (like nix-command and flakes)
  nix.settings.experimental-features = [ "nix-command" "flakes" ];

  # =================================================================
  # 3. NETWORKING
  #
  # Configure network interfaces and services.
  # =================================================================
  networking.hostName = "lab-nixos"; # Define your hostname

  # Enable NetworkManager for easy network management (wired and wireless)
  networking.networkmanager.enable = true;

  # Configure the firewall
  networking.firewall.allowedTCPPorts = [ 22 ]; # Open SSH port
  # networking.firewall.allowedUDPPorts = [ ... ]; Add UDP ports if needed

  # =================================================================
  # 4. TIME AND LOCALIZATION
  #
  # Set timezone and locale settings.
  # =================================================================
  time.timeZone = "America/Los_Angeles"; # Set your system's time zone

  i18n.defaultLocale = "en_US.UTF-8"; # Set the default locale

  # Set extra locale settings for better compatibility
  i18n.extraLocaleSettings = {
    LC_ADDRESS = "en_US.UTF-8";
    LC_IDENTIFICATION = "en_US.UTF-8";
    LC_MEASUREMENT = "en_US.UTF-8";
    LC_MONETARY = "en_US.UTF-8";
    LC_NAME = "en_US.UTF-8";
    LC_NUMERIC = "en_US.UTF-8";
    LC_PAPER = "en_US.UTF-8";
    LC_TELEPHONE = "en_US.UTF-8";
    LC_TIME = "en_US.UTF-8";
  };

  # =================================================================
  # 5. HARDWARE AND SERVICES
  #
  # Configure hardware-related services like sound and printing.
  # =================================================================
  # Enable printing support
  services.printing.enable = true;

  # Sound configuration: Use PipeWire
  hardware.pulseaudio.enable = false; # Disable PulseAudio if using PipeWire
  security.rtkit.enable = true; # Required for PipeWire

  services.pipewire = {
    enable = true;
    alsa.enable = true; # ALSA support
    alsa.support32Bit = true; # 32-bit support for compatibility
    pulse.enable = true; # Emulate PulseAudio for compatibility
    # jack.enable = true; # Optional: Enable JACK support
  };

  # =================================================================
  # 6. DISPLAY SERVER AND DESKTOP ENVIRONMENT
  #
  # Configure X11, display manager, and the desktop environment (GNOME).
  # =================================================================
  services.xserver.enable = true; # Enable the X11 display server

  # Enable GNOME display manager (GDM) and the GNOME desktop environment
  services.xserver.displayManager.gdm.enable = true;
  services.xserver.desktopManager.gnome.enable = true;

  # Configure keyboard layout for X11
  services.xserver.xkb = {
    layout = "us";
    variant = ""; # e.g., "altgr-intl" for international characters
  };

  # =================================================================
  # 7. SECURITY
  #
  # Configure security-related options like SSH.
  # Firewall is configured in the Networking section (Section 3).
  # =================================================================
  # Enable OpenSSH server with X11 forwarding
  services.openssh = {
    enable = true;
    settings = {
      X11Forwarding = true; # Allow X11 forwarding over SSH
      # PasswordAuthentication = false; # Optional: Disable password auth for security
      # PermitRootLogin = "no"; # Optional: Prevent root login via SSH
    };
  };

  # =================================================================
  # 8. USER CONFIGURATION
  #
  # Define system users and their properties.
  # =================================================================
  users.users.dhuynh = {
    isNormalUser = true; # This is a regular user account
    description = "Danny Huynh";
    # Add user to necessary groups (e.g., for network management, sudo)
    extraGroups = [ "networkmanager" "wheel" ];
    shell = pkgs.zsh; # Set Zsh as the user's default shell
    packages = with pkgs; [
      # User-specific packages can be listed here.
      # Packages listed here are added to the user's ~/.nix-profile.
      # Alternatively, use Home Manager for more comprehensive user config.
      # Example: firefox # Install Firefox only for this user
    ];
  };

  # =================================================================
  # 9. PROGRAM-SPECIFIC MODULES
  #
  # Enable and configure specific programs using their NixOS modules.
  # These modules often provide deeper system integration than just
  # adding the package to environment.systemPackages.
  # =================================================================
  # Enable Zsh module for system-wide Zsh setup
  programs.zsh = {
    enable = true;
    # Set Zsh as the global login shell (optional, user setting takes precedence)
    # shellInit = '' # Add custom initialization commands for Zsh
    #   # Example: alias ls='ls --color=auto'
    # '';
  };

  # Enable and configure Tmux using the NixOS module
  programs.tmux = {
    enable = true; # Keep this enabled

    # Map some common settings from your .tmux.conf
    # clock24 = true; # Maps to 'set -g clock-mode-style 24' - Uncomment if desired


    # List your TPM plugins here. NixOS handles TPM setup for you.
    plugins = with pkgs.tmuxPlugins; [
      # Essential tmux plugins (using correct names from nix repl)
      sensible
      catppuccin # Name was already correct

      # Plugins for status bar segments (using correct names from nix repl)
      # online-status
      # Removed battery plugin as requested
    ];

    # All other lines from your .tmux.conf go here.
    # This includes keybinds, status bar customization, pane/window styles,
    # and plugin-specific configuration options (@plugin_option variables).
    extraConfig = ''
      # General Settings (those not covered by direct options)
      set -g default-terminal "tmux-256color" # Set the default terminal
      set -ga terminal-features ",xterm-256color:RGB" # Fix nvim colors
      set -g mouse on # Enable mouse support


      # Rebind prefix key for easy config reloading (Prefix + r)
      unbind r
      # Corrected path to the generated tmux.conf
      bind r source-file /etc/tmux.conf display-message "/etc/tmux.conf reloaded."

      # Set status bar position (top or bottom)
      set -g status-position top

      # Configure general status bar appearance
      set -g status-style "bg=#{@thm_bg}"
      set -g status-justify "absolute-centre"


      # =============================================================================
      # Plugin-Specific Configuration
      # =============================================================================

      # --- Catppuccin Theme Configuration ---
      # These variables configure the Catppuccin theme's appearance.
      # Refer to https://github.com/catppuccin/tmux for all available options.
      set -g @catppuccin_flavor "macchiato" # Choose your desired flavor: latte, frappe, macchiato, mocha
      set -g @catppuccin_status_background "none" # Keep status background transparent or set to a color (e.g., "default")
      set -g @catppuccin_window_status_style "none" # Remove special styling for non-current window titles
      set -g @catppuccin_pane_status_enabled "off" # Disable pane status line (e.g., process name)
      set -g @catppuccin_pane_border_status "off" # Disable displaying a status line on pane borders


      # --- Tmux Online Status Plugin Configuration ---
      # These variables define the icons for online/offline status.
      # set -g @online_icon "ok" # Icon/text to display when online
      # set -g @offline_icon "nok" # Icon/text to display when offline

      # --- Tmux Battery Plugin Configuration ---
      # Removed battery plugin configuration lines


      # =============================================================================
      # Status Line Segments Customization
      # =============================================================================

      # Status Left Segments
      set -g status-left-length 100 # Set maximum length for the left status bar
      set -g status-left "" # Clear default status-left to build a custom one

      # Add segments to the left status bar. Each 'set -ga' appends to the string.
      #
      # Segment: Prefix indicator / Session Name
      # Displays 'prefix' if prefix is pressed, followed by session name.
      # Colors: Red background, main background foreground for prefix active;
      #         Main background background, green foreground for prefix inactive.
      # Icon:  (Nerd Font icon for Tmux/Window Manager)
      set -ga status-left "#{?client_prefix,#{#[bg=#{@thm_red},fg=#{@thm_bg},bold]  #S },#{#[bg=#{@thm_bg},fg=#{@thm_green}]  #S }}"
      set -ga status-left "#[bg=#{@thm_bg},fg=#{@thm_overlay_0},none]│" # Separator (vertical bar)

      # Segment: Current Command/Process
      # Displays the command/process running in the current pane.
      # Color: Maroon foreground. Icon:  (Nerd Font icon for Terminal)
      set -ga status-left "#[bg=#{@thm_bg},fg=#{@thm_maroon}]  #{pane_current_command} "
      set -ga status-left "#[bg=#{@thm_bg},fg=#{@thm_overlay_0},none]│" # Separator (vertical bar)

      # Segment: Current Directory
      # Displays the current working directory, shortening $USER to ~ and truncating if too long.
      # Color: Blue foreground. Icon:  (Nerd Font icon for Folder)
      set -ga status-left "#[bg=#{@thm_bg},fg=#{@thm_blue}]  #{=/-32/...:#{s|$USER|~|:#{b:pane_current_path}}} "
      set -ga status-left "#[bg=#{@thm_bg},fg=#{@thm_overlay_0},none]#{?window_zoomed_flag,│,}" # Separator (vertical bar) for zoomed window

      # Segment: Zoomed Window Indicator
      # Displays "zoom" with an icon if the current window is zoomed.
      # Color: Yellow foreground. Icon:  (Nerd Font icon for Zoom)
      set -ga status-left "#[bg=#{@thm_bg},fg=#{@thm_yellow}]#{?window_zoomed_flag,  zoom ,}"


      # Status Right Segments
      set -g status-right-length 100 # Set maximum length for the right status bar
      set -g status-right "" # Clear default status-right to build a custom one

      # Add segments to the right status bar. Each 'set -ga' appends to the string.

      # Segment: Battery Status (from tmux-battery plugin)
      # This segment has been removed as the battery plugin is not included.

      set -ga status-right "#[bg=#{@thm_bg},fg=#{@thm_overlay_0}, none]│" # Separator (vertical bar)

      # Segment: Online/Offline Status (from tmux-online-status plugin)
      # Uses 'ok' or 'nok' configured earlier. Icons: 󰖩 (wifi icon), 󰖪 (wifi off icon)
      # Color: Mauve foreground for online, Red bold/reverse for offline.
      # set -ga status-right "#[bg=#{@thm_bg}]#{?#{==:#{online_status},ok},#[fg=#{@thm_mauve}] 󰖩 on ,#[fg=#{@thm_red},bold]#[reverse] 󰖪 off }"
      # set -ga status-right "#[bg=#{@thm_bg},fg=#{@thm_overlay_0}, none]│" # Separator (vertical bar)
      
      # Segment: Date and Time
      # Displays current date and time, including the day of the week.
      # Color: Blue foreground. Icons: 󰭦 (Nerd Font icon for Calendar), 󰅐 (Nerd Font icon for Clock)
      # Ensure only ONE line like this exists for the date and time segment:
      set -ga status-right "#[bg=#{@thm_bg},fg=#{@thm_blue}] 󰭦 %a %Y-%m-%d 󰅐 %H:%M " # Example with abbreviated day (%a)


      # =============================================================================
      # Pane and Window Look and Feel
      # =============================================================================

      # --- Pane Borders ---
      setw -g pane-border-status top
      setw -g pane-border-format ""
      setw -g pane-active-border-style "bg=#{@thm_bg},fg=#{@thm_overlay_0}"
      setw -g pane-border-style "bg=#{@thm_bg},fg=#{@thm_surface_0}"
      setw -g pane-border-lines single


      # --- Window Titles and Status ---
      # Automatically rename windows based on the running command.
      set -wg automatic-rename on
      # Set a default format for automatically renamed windows (e.g., just "Window").
      set -g automatic-rename-format "Window" # This may conflict with `window-status-current-format` if you want to see actual command names.

      # Format for non-current window titles in the status bar.
      # Displays window index (#I) and window name (#W) if not "Window".
      set -g window-status-format " #I#{?#{!=:#{window_name},Window},: #W,} "
      # Styling for non-current window titles.
      set -g window-status-style "bg=#{@thm_bg},fg=#{@thm_rosewater}"
      # Styling for the last active window (before current).
      set -g window-status-last-style "bg=#{@thm_bg},fg=#{@thm_peach}"
      # Styling for window titles with activity (e.g., new output).
      set -g window-status-activity-style "bg=#{@thm_red},fg=#{@thm_bg}"
      # Styling for window titles with bell notifications.
      set -g window-status-bell-style "bg=#{@thm_red},fg=#{@thm_bg},bold"
      # Separator between window titles in the status bar.
      set -gF window-status-separator "#[bg=#{@thm_bg},fg=#{@thm_overlay_0}]│"

      # Format for the current window title in the status bar.
      # Displays window index (#I) and window name (#W) if not "Window".
      set -g window-status-current-format " #I#{?#{!=:#{window_name},Window},: #W,} "
      # Styling for the current window title.
      set -g window-status-current-style "bg=#{@thm_peach},fg=#{@thm_bg},bold"

      # You do NOT need the TPM Initialization line here.
      # run '~/.tmux/plugins/tpm/tpm' is handled by the NixOS module.
    ''; # Close the extraConfig multi-line string
  };

  # Make sure you also still have tmux, zsh, and neovim in environment.systemPackages
  # to ensure their binaries are available in the system-wide PATH.
  environment.systemPackages = with pkgs; [
    xorg.xauth # For X11 authentication (needed by some X programs)
    plocate # Permission-aware locate alternative
    neovim
    wget
    zsh
    git
    fzf
    zsh-powerlevel10k # Install powerlevel10k theme for Zsh
    tmux
    xclip # Added for clipboard support
    htop # Example: A process viewer
    tree # Example: List contents of directories in a tree-like format
  ];


  # =================================================================
  # 10. GLOBAL ENVIRONMENT CONFIGURATION
  #
  # Configure environment variables and system-wide command alternatives.
  # =================================================================
  # Set the default editor globally
  environment.variables.EDITOR = "nvim";
  environment.variables.VISUAL = "nvim"; # Also set VISUAL

  # Override 'vi' and 'vim' commands system-wide to point to nvim
  # Note: This is often handled automatically or preferred via programs.neovim aliases.
  # Keeping it here if you have a specific reason, but programs.neovim.viAlias/vimAlias is cleaner.
  environment.etc."alternatives/vi".source = "${pkgs.neovim}/bin/nvim";
  environment.etc."alternatives/vim".source = "${pkgs.neovim}/bin/nvim";

  # =================================================================
  # 11. SYSTEM CONFIGURATION FILE COPY
  #
  # Copy the configuration.nix file into the built system path.
  # This allows viewing the exact config used for a generation via
  # /run/current-system/configuration.nix
  # =================================================================
  system.copySystemConfiguration = true;


  # =================================================================
  # 12. SYSTEM STATE VERSION
  #
  # This value determines the NixOS release with which your system is to
  # be compatible, in order to avoid breaking some software such as
  # databases. You should change this only after NixOS release notes say
  # you should, and you can review the migration steps at:
  # https://nixos.org/manual/nixos/stable/release-notes/
  # =================================================================
  system.stateVersion = "24.11"; # Do not change this after installation

}
